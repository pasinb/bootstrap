// child padding classes
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    @each $spacerNum, $spacerValue in $spacers {
      .cpl#{$infix}-#{$spacerNum} {
        > *:not(:first-child) {
          padding-left: $spacerValue;
        }
      }
      .cpt#{$infix}-#{$spacerNum} {
        > *:not(:first-child) {
          padding-top: $spacerValue;
        }
      }
      .cml#{$infix}-#{$spacerNum} {
        > *:not(:first-child) {
          margin-left: $spacerValue;
        }
      }
      .cmt#{$infix}-#{$spacerNum} {
        > *:not(:first-child) {
          margin-top: $spacerValue;
        }
      }
      .ccpl#{$infix}-#{$spacerNum} {
        > * {
          padding-left: $spacerValue;
        }
      }
      .ccpt#{$infix}-#{$spacerNum} {
        > * {
          padding-top: $spacerValue;
        }
      }
      .ccml#{$infix}-#{$spacerNum} {
        > * {
          margin-left: $spacerValue;
        }
      }
      .ccmt#{$infix}-#{$spacerNum} {
        > * {
          margin-top: $spacerValue;
        }
      }
    }
  }
}

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    // row spacers
    @each $spacerNum, $spacerValue in $spacers {
      .row.g#{$infix}-#{$spacerNum} {
        margin: -$spacerValue / 2;
        > [class*="col-"] {
          padding: $spacerValue / 2;
        }
      }
      .row.gx#{$infix}-#{$spacerNum} {
        margin-left: -$spacerValue / 2;
        margin-right: -$spacerValue / 2;
        > [class*="col-"] {
          padding-left: $spacerValue / 2;
          padding-right: $spacerValue / 2;
        }
      }
      .row.gy#{$infix}-#{$spacerNum} {
        margin-top: -$spacerValue / 2;
        margin-bottom: -$spacerValue / 2;
        > [class*="col-"] {
          padding-top: $spacerValue / 2;
          padding-bottom: $spacerValue / 2;
        }
      }
    }
  }
}

// border-radius
@for $i from 1 through 20 {
  .br-#{$i} {
    border-radius: #{$i}px !important;
  }
}

$lh-list: (
  "0-5": 0.5,
  "0-6": 0.6,
  "0-7": 0.7,
  "0-8": 0.8,
  "0-9": 0.9,
  "1": 1,
  "1-1": 1.1,
  "1-2": 1.2,
  "1-3": 1.3,
  "1-4": 1.4,
  "1-5": 1.5,
  "1-6": 1.6,
  "1-7": 1.7,
  "1-8": 1.8,
  "1-9": 1.9,
  "2": 2,
  "2-1": 2.1,
  "2-2": 2.2,
  "2-3": 2.3,
  "2-4": 2.4,
  "2-5": 2.5,
);

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    @each $text, $value in $lh-list {
      .lh#{$infix}-#{$text} {
        line-height: #{$value} !important;
      }
    }
  }
}

// font-size, height, width
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    @each $num, $value in $spacers {
      .f#{$infix}-#{$num} {
        font-size: #{$value} !important;
      }
      .ww#{$infix}-#{$num} {
        width: #{$value} !important;
      }
      .hh#{$infix}-#{$num} {
        height: #{$value} !important;
      }
    }
  }
}

//z-index
@for $i from 1 through 10 {
  .z-#{$i} {
    z-index: #{$i} !important;
  }
}

// grid stuff
.d-grid {
  display: grid;
}

@for $i from 1 through 10 {
  .gcs-#{$i} {
    grid-column-start: $i;
  }
  .gce-#{$i} {
    grid-column-end: $i;
  }
  .grs-#{$i} {
    grid-row-start: $i;
  }
  .gre-#{$i} {
    grid-row-end: $i;
  }
}

.thin {
  font-weight: 100;
}

.extra-light {
  font-weight: 200;
}

.light {
  font-weight: 300;
}

.regular {
  font-weight: 300;
}

.medium {
  font-weight: 500;
}

.semi-bold {
  font-weight: 600;
}

.bold {
  font-weight: 700;
}

.extra-bold {
  font-weight: 800;
}

.black {
  font-weight: 900;
}
